// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator zod {
  provider = "zod-prisma"
  output   = "./zod"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum UserStatus {
  INVITED
  ACTIVE
  DELETED
  BLOCKED
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String         @id @default(cuid())
  /// @zod.email({ message: "Invalid email address" })
  email          String         @unique
  slug           String         @unique
  passwordHash   String
  name           String?
  UserStatus     UserStatus     @default(ACTIVE)
  role           UserRole       @default(USER)
  createdAt      DateTime       @default(now())
  modifiedAt     DateTime       @default(now())
  Post           Post[]
  PostViews      PostView[]
  ReactedOnPosts PostReaction[]
}

model Post {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  createdBy  String
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())
  CreatedBy  User     @relation(fields: [createdBy], references: [id])
  Source     Source   @relation(fields: [sourceId], references: [id])
  sourceId   String
}

model Source {
  id       String @id @default(cuid())
  name     String
  url      String
  imageSrc String
  Post     Post[]
}

model PostView {
  id       String   @id
  viewedBy String   @map("userId")
  viewedAt DateTime @default(now())
  ViewedBy User     @relation(fields: [viewedBy], references: [id])
}

enum PostReactionTypes {
  LIKE
  DISLIKE
}

model PostReaction {
  id        String            @id
  reaction  PostReactionTypes @default(LIKE)
  reactedBy String            @map("userId")
  viewedAt  DateTime          @default(now())
  ReactedBy User              @relation(fields: [reactedBy], references: [id])
}
